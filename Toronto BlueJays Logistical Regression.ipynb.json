{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 819,
   "id": "f51ebba8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Toronto Blue Jays Right Handed Pitcher Predictions\n",
    "\n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "id": "4ee6b58e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.read_csv('/Users/idelsontaveras/Downloads/Toronto Blue Jays Research Intern Technical Exercise/deploy.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "id": "f26761b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Velo</th>\n",
       "      <th>SpinRate</th>\n",
       "      <th>HorzBreak</th>\n",
       "      <th>InducedVertBreak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94.72</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>3.10</td>\n",
       "      <td>18.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>95.25</td>\n",
       "      <td>2033.0</td>\n",
       "      <td>11.26</td>\n",
       "      <td>14.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>92.61</td>\n",
       "      <td>2389.0</td>\n",
       "      <td>11.00</td>\n",
       "      <td>21.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94.94</td>\n",
       "      <td>2360.0</td>\n",
       "      <td>6.84</td>\n",
       "      <td>18.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>97.42</td>\n",
       "      <td>2214.0</td>\n",
       "      <td>16.70</td>\n",
       "      <td>13.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Velo  SpinRate  HorzBreak  InducedVertBreak\n",
       "0  94.72    2375.0       3.10             18.15\n",
       "1  95.25    2033.0      11.26             14.50\n",
       "2  92.61    2389.0      11.00             21.93\n",
       "3  94.94    2360.0       6.84             18.11\n",
       "4  97.42    2214.0      16.70             13.38"
      ]
     },
     "execution_count": 821,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "id": "e8a77a81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 4)"
      ]
     },
     "execution_count": 822,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "id": "ae0746f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Velo</th>\n",
       "      <th>SpinRate</th>\n",
       "      <th>HorzBreak</th>\n",
       "      <th>InducedVertBreak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>9987.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>93.924134</td>\n",
       "      <td>2240.582958</td>\n",
       "      <td>9.501652</td>\n",
       "      <td>14.162905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.608429</td>\n",
       "      <td>195.113163</td>\n",
       "      <td>5.032214</td>\n",
       "      <td>4.593760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>56.740000</td>\n",
       "      <td>1114.000000</td>\n",
       "      <td>-6.700000</td>\n",
       "      <td>-9.280000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>92.510000</td>\n",
       "      <td>2111.000000</td>\n",
       "      <td>5.657500</td>\n",
       "      <td>11.310000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>94.030000</td>\n",
       "      <td>2240.000000</td>\n",
       "      <td>9.370000</td>\n",
       "      <td>15.195000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>95.600000</td>\n",
       "      <td>2368.000000</td>\n",
       "      <td>13.580000</td>\n",
       "      <td>17.590000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>102.500000</td>\n",
       "      <td>3357.000000</td>\n",
       "      <td>23.480000</td>\n",
       "      <td>25.640000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Velo     SpinRate     HorzBreak  InducedVertBreak\n",
       "count  10000.000000  9987.000000  10000.000000      10000.000000\n",
       "mean      93.924134  2240.582958      9.501652         14.162905\n",
       "std        2.608429   195.113163      5.032214          4.593760\n",
       "min       56.740000  1114.000000     -6.700000         -9.280000\n",
       "25%       92.510000  2111.000000      5.657500         11.310000\n",
       "50%       94.030000  2240.000000      9.370000         15.195000\n",
       "75%       95.600000  2368.000000     13.580000         17.590000\n",
       "max      102.500000  3357.000000     23.480000         25.640000"
      ]
     },
     "execution_count": 823,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 824,
   "id": "3e109d3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                 0\n",
       "SpinRate            13\n",
       "HorzBreak            0\n",
       "InducedVertBreak     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 824,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "id": "6efad874",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['SpinRate'] = df['SpinRate'].fillna(df['SpinRate'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "id": "00c0578b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                0\n",
       "SpinRate            0\n",
       "HorzBreak           0\n",
       "InducedVertBreak    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 826,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 827,
   "id": "d1a46221",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 828,
   "id": "23862927",
   "metadata": {},
   "outputs": [],
   "source": [
    "InPlayRand = np.random.randint(2, size=len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 829,
   "id": "e66f8b5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['InPlayRand'] = InPlay"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 830,
   "id": "44e08f87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Velo  SpinRate  HorzBreak  InducedVertBreak  InPlayRand\n",
      "0  94.72    2375.0       3.10             18.15           0\n",
      "1  95.25    2033.0      11.26             14.50           1\n",
      "2  92.61    2389.0      11.00             21.93           0\n",
      "3  94.94    2360.0       6.84             18.11           0\n",
      "4  97.42    2214.0      16.70             13.38           0\n"
     ]
    }
   ],
   "source": [
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 831,
   "id": "3ea6205b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                1.000000\n",
       "SpinRate            0.323363\n",
       "HorzBreak           0.003784\n",
       "InducedVertBreak    0.084603\n",
       "InPlayRand          0.009073\n",
       "Name: Velo, dtype: float64"
      ]
     },
     "execution_count": 831,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['Velo']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "id": "bfb94be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                0.323363\n",
       "SpinRate            1.000000\n",
       "HorzBreak          -0.264320\n",
       "InducedVertBreak    0.383966\n",
       "InPlayRand         -0.012671\n",
       "Name: SpinRate, dtype: float64"
      ]
     },
     "execution_count": 832,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['SpinRate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 833,
   "id": "ab88726a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                0.003784\n",
       "SpinRate           -0.264320\n",
       "HorzBreak           1.000000\n",
       "InducedVertBreak   -0.578438\n",
       "InPlayRand         -0.006832\n",
       "Name: HorzBreak, dtype: float64"
      ]
     },
     "execution_count": 833,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['HorzBreak']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 834,
   "id": "89cac9df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Velo                0.084603\n",
       "SpinRate            0.383966\n",
       "HorzBreak          -0.578438\n",
       "InducedVertBreak    1.000000\n",
       "InPlayRand         -0.000936\n",
       "Name: InducedVertBreak, dtype: float64"
      ]
     },
     "execution_count": 834,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['InducedVertBreak']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 835,
   "id": "acc547e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Velo</th>\n",
       "      <th>SpinRate</th>\n",
       "      <th>InducedVertBreak</th>\n",
       "      <th>InPlayRand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94.72</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>18.15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>95.25</td>\n",
       "      <td>2033.0</td>\n",
       "      <td>14.50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>92.61</td>\n",
       "      <td>2389.0</td>\n",
       "      <td>21.93</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94.94</td>\n",
       "      <td>2360.0</td>\n",
       "      <td>18.11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>97.42</td>\n",
       "      <td>2214.0</td>\n",
       "      <td>13.38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>92.32</td>\n",
       "      <td>2148.0</td>\n",
       "      <td>16.70</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>94.96</td>\n",
       "      <td>2420.0</td>\n",
       "      <td>14.13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>92.83</td>\n",
       "      <td>2132.0</td>\n",
       "      <td>18.40</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>97.12</td>\n",
       "      <td>2436.0</td>\n",
       "      <td>15.87</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>96.00</td>\n",
       "      <td>2350.0</td>\n",
       "      <td>18.22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Velo  SpinRate  InducedVertBreak  InPlayRand\n",
       "0     94.72    2375.0             18.15           0\n",
       "1     95.25    2033.0             14.50           1\n",
       "2     92.61    2389.0             21.93           0\n",
       "3     94.94    2360.0             18.11           0\n",
       "4     97.42    2214.0             13.38           0\n",
       "...     ...       ...               ...         ...\n",
       "9995  92.32    2148.0             16.70           1\n",
       "9996  94.96    2420.0             14.13           0\n",
       "9997  92.83    2132.0             18.40           1\n",
       "9998  97.12    2436.0             15.87           1\n",
       "9999  96.00    2350.0             18.22           0\n",
       "\n",
       "[10000 rows x 4 columns]"
      ]
     },
     "execution_count": 835,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SpinRate = df['SpinRate']\n",
    "df=df.drop(['HorzBreak'], axis=1)\n",
    "df['SpinRate']= SpinRate\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 836,
   "id": "8b49596e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = df['Velo']\n",
    "y = df['SpinRate']\n",
    "coefficients = np.polyfit(x, y, 1)\n",
    "m = coefficients[0]  \n",
    "b = coefficients[1]\n",
    "y_pred = m * x + b\n",
    "plt.scatter(x, y, label='Data Points')\n",
    "plt.plot(x, y_pred, color='red', label='Trend Line')\n",
    "plt.xlabel('Velo')\n",
    "plt.ylabel('SpinRate')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 837,
   "id": "fa9d3eb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = df['Velo']\n",
    "y = df['InducedVertBreak']\n",
    "coefficients = np.polyfit(x, y, 1)\n",
    "m = coefficients[0]  \n",
    "b = coefficients[1]\n",
    "y_pred = m * x + b\n",
    "plt.scatter(x, y, label='Data Points')\n",
    "plt.plot(x, y_pred, color='red', label='Trend Line')\n",
    "plt.xlabel('Velo')\n",
    "plt.ylabel('InducedVertBreak')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 838,
   "id": "48fbc167",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = df['SpinRate']\n",
    "y = df['InducedVertBreak']\n",
    "coefficients = np.polyfit(x, y, 1)\n",
    "m = coefficients[0]  \n",
    "b = coefficients[1]\n",
    "y_pred = m * x + b\n",
    "plt.scatter(x, y, label='Data Points')\n",
    "plt.plot(x, y_pred, color='red', label='Trend Line')\n",
    "plt.xlabel('SpinRate')\n",
    "plt.ylabel('InducedVertBreak')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 839,
   "id": "2d1fd423",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 3)"
      ]
     },
     "execution_count": 839,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train=df[['Velo','SpinRate','InducedVertBreak']]\n",
    "y_train= df['InPlayRand']\n",
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 840,
   "id": "b98773bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Velo</th>\n",
       "      <th>SpinRate</th>\n",
       "      <th>InducedVertBreak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94.72</td>\n",
       "      <td>2375.0</td>\n",
       "      <td>18.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>95.25</td>\n",
       "      <td>2033.0</td>\n",
       "      <td>14.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>92.61</td>\n",
       "      <td>2389.0</td>\n",
       "      <td>21.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94.94</td>\n",
       "      <td>2360.0</td>\n",
       "      <td>18.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>97.42</td>\n",
       "      <td>2214.0</td>\n",
       "      <td>13.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>92.32</td>\n",
       "      <td>2148.0</td>\n",
       "      <td>16.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>94.96</td>\n",
       "      <td>2420.0</td>\n",
       "      <td>14.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>92.83</td>\n",
       "      <td>2132.0</td>\n",
       "      <td>18.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>97.12</td>\n",
       "      <td>2436.0</td>\n",
       "      <td>15.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>96.00</td>\n",
       "      <td>2350.0</td>\n",
       "      <td>18.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Velo  SpinRate  InducedVertBreak\n",
       "0     94.72    2375.0             18.15\n",
       "1     95.25    2033.0             14.50\n",
       "2     92.61    2389.0             21.93\n",
       "3     94.94    2360.0             18.11\n",
       "4     97.42    2214.0             13.38\n",
       "...     ...       ...               ...\n",
       "9995  92.32    2148.0             16.70\n",
       "9996  94.96    2420.0             14.13\n",
       "9997  92.83    2132.0             18.40\n",
       "9998  97.12    2436.0             15.87\n",
       "9999  96.00    2350.0             18.22\n",
       "\n",
       "[10000 rows x 3 columns]"
      ]
     },
     "execution_count": 840,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 841,
   "id": "4e67cc31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       0\n",
       "1       1\n",
       "2       0\n",
       "3       0\n",
       "4       0\n",
       "       ..\n",
       "9995    1\n",
       "9996    0\n",
       "9997    1\n",
       "9998    1\n",
       "9999    0\n",
       "Name: InPlayRand, Length: 10000, dtype: int64"
      ]
     },
     "execution_count": 841,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "id": "7b45bb2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "id": "53db843b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 843,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "id": "e2d98a48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, ..., 1, 0, 0])"
      ]
     },
     "execution_count": 844,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn_model= LogisticRegression().fit(x_train, y_train)\n",
    "sklearn_y_predictions= sklearn_model.predict(x_train)\n",
    "sklearn_y_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "id": "ad6a63ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "id": "68db5a21",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['InPlayPredict'] = predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 847,
   "id": "b22e6cc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Velo  SpinRate  InducedVertBreak  InPlayRand  InPlayPredict\n",
      "9995  92.32    2148.0             16.70           1              1\n",
      "9996  94.96    2420.0             14.13           0              0\n",
      "9997  92.83    2132.0             18.40           1              1\n",
      "9998  97.12    2436.0             15.87           1              0\n",
      "9999  96.00    2350.0             18.22           0              0\n"
     ]
    }
   ],
   "source": [
    "print(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 848,
   "id": "d8abdef2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('/Users/idelsontaveras/Downloads/Toronto Blue Jays Research Intern Technical Exercise/Predictions.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcd76221",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
